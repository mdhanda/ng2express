{"version":3,"sources":["app/layout/home.component.ts"],"names":[],"mappings":"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","file":"app/layout/home.component.js","sourcesContent":["import { Component, View } from \"angular2/core\";\r\nimport { SEMANTIC_COMPONENTS, SEMANTIC_DIRECTIVES } from \"ng-semantic/semantic\";\r\nimport { Http, Headers, RequestOptions } from \"angular2/http\";\r\nimport \"rxjs/operator/map\";\r\n\r\n@Component({\r\n    selector: \"home\"\r\n})\r\n@View({\r\n    directives: [SEMANTIC_COMPONENTS, SEMANTIC_DIRECTIVES],\r\n    template: `\r\n    <div class=\"ui container\">\r\n        <sm-segment class=\"raised\">\r\n            <h1>Angular 2 and Express authentication with JWT!</h1>\r\n            <sm-list class=\"ui list bulleted\">\r\n                <sm-item class=\"item\">username: {{user.username}}</sm-item>\r\n                <sm-item class=\"item\">password: {{user.password}}</sm-item>\r\n            </sm-list>\r\n            <p>\r\n                Hardcoded data used for login and signup functionality.\r\n            </p>\r\n        </sm-segment>\r\n        <br/>\r\n\r\n        <sm-button class=\"\" (click)=\"call()\">Call protected API</sm-button>\r\n        <sm-button class=\"positive\" (click)=\"login()\">Login</sm-button>\r\n        <sm-button class=\"basic red\" (click)=\"remove()\">Remove JWT from localStorage</sm-button>\r\n\r\n\r\n        <sm-button class=\"right floated\" (click)=\"signup()\">Signup</sm-button>\r\n\r\n        <div class=\"ui divider hidden\"></div>\r\n\r\n        <!-- Signup response -->\r\n        <sm-segment style=\"word-wrap: break-word;\" *ngIf=\"response\" class=\"raised\">\r\n            <sm-list class=\"ui list bulleted\">\r\n                <sm-item class=\"item\">hashed: {{response?.hashed}}</sm-item>\r\n                <sm-item class=\"item\">salt: {{response?.salt}}</sm-item>\r\n            </sm-list>\r\n        </sm-segment>\r\n\r\n        <!-- API call response -->\r\n        <sm-segment *ngIf=\"error\" class=\"inverted red\">\r\n            <sm-item class=\"item\">{{error?.message}}</sm-item>\r\n        </sm-segment>\r\n\r\n        <sm-segment *ngIf=\"data\" class=\"inverted green\">\r\n            <sm-item class=\"item\">{{data?.title}}</sm-item>\r\n            <sm-item class=\"item\">{{data?.text}}</sm-item>\r\n        </sm-segment>\r\n    </div>\r\n    `\r\n})\r\nexport class Home {\r\n    public response: any;\r\n    public data: any;\r\n    public error: any;\r\n    public user: any = {\r\n        password: \"angualr2express\",\r\n        username: \"john\"\r\n    };\r\n    public http: Http;\r\n\r\n    constructor(h: Http) {\r\n        this.http = h;\r\n    }\r\n\r\n    public signup(): void {\r\n\r\n        this.http.post(\"/login/signup\", JSON.stringify({\r\n                password: this.user.password,\r\n                username: this.user.username\r\n            }),\r\n            new RequestOptions({\r\n                headers: new Headers({\"Content-Type\": \"application/json\"})\r\n            }))\r\n            .map((res: any) => res.json())\r\n            .subscribe(\r\n                (res: any) => {\r\n                    this.response = res;\r\n                },\r\n                (error: any) => {\r\n                    console.log(error.json());\r\n                }\r\n            );\r\n    }\r\n\r\n    public call(): void {\r\n\r\n        delete this.error;\r\n        delete this.data;\r\n\r\n        this.http.get(\"/api\", new RequestOptions({\r\n                headers: new Headers({\"Auth\": localStorage.getItem(\"jwt\"), \"Content-Type\": \"application/json\"})\r\n            }))\r\n            .map((data: any) => data.json())\r\n            .subscribe(\r\n                (data: any) => {\r\n                    this.data = data;\r\n                },\r\n                (error: any) => {\r\n                    this.error = error.json();\r\n                }\r\n            );\r\n    }\r\n\r\n    public login(): void {\r\n        this.http.post(\"/login\", JSON.stringify({password: this.user.password}), new RequestOptions({\r\n                headers: new Headers({\"Content-Type\": \"application/json\"})\r\n            }))\r\n            .map((res: any) => res.json())\r\n            .subscribe(\r\n                (res: any) => {\r\n                    delete this.error;\r\n                    this.data = {\r\n                        text: \"You can call protected api now\",\r\n                        title: \"Login succesfull\"\r\n                    };\r\n                    localStorage.setItem(\"jwt\", res.jwt);\r\n                },\r\n                (error: any) => {\r\n                    console.log(error);\r\n                }\r\n            );\r\n    }\r\n\r\n    public remove(): void {\r\n        this.error = {message: \"JWT removed\"};\r\n        delete this.data;\r\n        localStorage.removeItem(\"jwt\");\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}